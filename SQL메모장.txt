***서브쿼리가 가능한 곳
서브쿼리를 쓰기전에 한번 생각!.
정말필요한가?
1. ***SELECT
        a테이블(감기관련),
        b테이블(코로나 확진 관련),
        c테이블(오미클론 확진자 관련)
    조건: 교집합 데이터(칼럼)이 없음.
    실행. 서브쿼리가 먼저 실행된 후 외부쿼리 실행
        SELECT 
            COUNT(*) as 감기확진, //감기 확진 수
            (SELECT COUNT(*)FROM코로나 )as 코로나 확진,
            (SELECT COUNT(*)FROM 오미크론) as 오미크론 확진   
        FROM 날씨
2. ***FROM
    FROM 서브쿼리 :
    언제 데이터를 먼저 필터링 해야할 때
    ex) emp테이블에 (급여가 3000천 이하) 을 찾고싶을떄.
3. ***WHERE
    where 서브쿼리:
    -단일행
    SELECT * FROM emp
    WHERE ename = (SELECT ename FROM emp WHERE empno = 3000)
    -다중행
    in : 시제로 존재하는 데이터의 값을 비교
    데이터가 많아지면 많아질 수록 속도가 느려짐.
    SELECT * FROM emp
    WHERE ename in (SELECT ename FROM emp WHERE sal <> 3000)
---------------
sql
DML
- select

- insert : 데이터를 저장
    작성법 1.
    INSERT INTI 테이블 이름(컬럼이름 [ex)'name',sal,job])
    VALUES(컬럼에해당하는데이터 [ex)'홍길동',3000,'manager']) 
    주의 : 테이블에 NULLABLE 
        1. 테이블에 job컬럼이 not null이면, insert할떄 무저건 데이터를 넣어야 함. 
        2. 테이블에 기본키가 auto increment 가 아니라면, 기본키 데이터를 넣어야 함.
        3. commit 을해야  최종 insert가 됨. (디비버 같은 프로그램은 auto commit 으로 설정되어 있음.)
    작성법 2.
    해당 테이블에 데이터를 모두 넣으면, 테이블 뒤 괄호 생략
    INSERT INTI 테이블
    VALUES(컬럼에해당하는데이터 [ex)'홍길동',3000,'manager',...])

- delete : 데이터 삭제
    작성법
    DELETE FROM 테이블이름
    wHERE 컬럼 = 70
    주의 : 
        1. 해당 컬럼이 ON DELETE CASCADE 로 설정되어 있으면, 연관된 컬럼 모두 삭제됨.
    실제로는 데이터 삭제x
    삭제여부 컬럼을 만듬 ex) 컬럼이름 : 회원탈퇴 여부
                             데이터 : 'y' or 'n'
- update


***SQL
DDL (auto commit)
1. CREATE
    => 테이블 생성!
    문법:
    CREATE TABLE 테이블이름 (컬럼이름 데이터타입 조건)
    ex) CREATE TABLE student(id INT(11) NOT NULL,name VARCHAR(20) NOT NULL, height INT(5),age INT(5) DEFAULT 0, create_at DATETIME DEFAULT CURRENT_TIMESTAMP);
    -- pk키를 만들면서 테이블만들기 (스키마)
    CREATE TABLE student(id INT(11) NOT null auto_increment,
    name VARCHAR(20) NOT null , height INT(5),
    age INT(5) DEFAULT 0, 
    create_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    ***CONSTRAINT student_id_pk primary key(id)
);

2. DROP
3. ALTER

***DDL(data Definition Language) 데이터 정의 언어
CREATE TABLE <table_name> : table 생성
DROP TABLE <table_name>   : table 삭제
ALTER TABLE <table_name>  : table 수정 (테이블 이름 변경할떄씀)

***DML (DATA manipulation Language) 데이터 조작 언어
SELECT :데이터 조회
DELETE :데이터 삭제
UPDATE :데이터 수정
INSERT :데이터 생성

DCL (data control Language) 데이터 제어언어
GRANT  : 특정 사용자에게 권한 부여
REBOKE : 특정 사용자 권한 회수

TCL : 논리적인 작업의 단위를 묶어서 DML에 의해 조작된 결과를 작업단위 별로 제어하는 명령어
COMMIT (DML은 커밋 미포함,DDL은 커밋 포함)
ROLLBACK : 실수로 DELETE 해도 ROLLBACK하면 최신 커밋상태로 돌아감

COMMIT 문은 관계형 데이터베이스 관리 시스템(RDBMS)에서 트랜잭션을 종료하고 다른 사용자에게 변경된 모든 사항을 보이도록 만드는 문이다. 
일반적으로 트랜잭션 종료시 해당 업데이트를 확정한다는 의미에서 "커밋"이라고 사용한다.

PRIMARY KEY(기본키)
해당 테이블의 식별자역할
테이블에 하나만 설정할 수 있는 키
중복 불가능
데이터의 유일성 보장
UNIQUE KEY 와의 다른점은 NULL 값으로 구분
NULL 값 불가능 only NOT NULL
UNIQUE KEY(고유키)
테이블 내 항상 유일해야 하는 값
중복 불가능
NULL 값 가능
PRIMARY KEY 와의 다른점은 NULL 값으로 구분
FOREIGN KEY(외래키)

*****
- 관계형 데이터베이스(R(관계)DBMS)
데이터를 더욱 안전하게 저장.
join이 있다.
부모테이블과 자식테이블이 존재 (참조하는쪽이 자식  / 참조를주는쪽이 부모)
ex) emp테이블에 deptno 컬럼이 있음.
    deptno컬럼은 dept테이블에서!
    emp테이블(자식)은 dept(부모)을 참조하고 있음.
CREATE TABLE 테이블_이름 
(
    empno int(11),
    ename VARCHAR(20),
    detpno int(5)
    foreign key(deptno) references dept(deptno)
)
    참조키(외래키)는 컬럼이름이 중요한게아니라, 데이터 타입이 같아야한다. 
    조건:참조할려는 컴럼은 고유한 데이터를 가진 컬럼이여야 한다.
    
***조건
on delete : 부모 데이터에 삭제 이벤트가 발생하면 자식 데이터에 이벤트 발생
on update  : 부모 데이터에 수정 이벤트가 발생하면 자식 데이터에 이벤트 발생
ex)foreign key(deptno) references dept(deptno)  on delete

이벤트종류 : 아래중 하나 선택
1. CASCADE : 자식 데이터 삭제or수정
2. set null : 자식 데이터 null 업데이트
3. set DEFAULT : 자식 데이터 default 값으로 없데이트
*4. restrict(default) : 부모 데이터 삭제 or 수정 불가능
5. NO ACTTON : 자식 테이블의 데이터는 변경되지 않습니다.
ex) ex)foreign key(deptno) references dept(deptno)  on delete CASCADE

- 비관계형 데이터베이스(NoSQL)
대표적 프로그램 : *Dynamobd, MongoDB
join이 없다
*분석이 목적 

*담당교수가 1명이라고 가정할때 테이블
(학생테이블) --교유한것이 키가 됨.  (교수테이블)
학생이름                            교수이름
학생나이                            교수번호(기본키)
교수번호(참조키,왜래키,fk)           담당과목
학점                                연차
학번 (기본키)
학년

담당교수가 2명이상이면 테이블을 쪼갬
(담당교수테이블)
학생번호(참조키)
교수번호(참조키)
담당번호(기본키)

1. 데이터 타입이 문자형인 vachar 컬럼에 정수형 데이터가 insert 가능 (하지만 실제로 정수형이 아닌 문자형이 저장)
2. 정수형이 오기 때문에 CHECK 제약조건으로 필터링 가능.
ex)
~~~
CREATE emp
 ename varchar(100) //(글자제한) 문자로작성
        <-
insert emp values(1) //ename 은 문자이기 떄문에 1을넣어도 문자1이 넣어지기 때문에 sum,avg 등 안써짐
***CHECK 제약조건 -> CHECk(예,아니오))//예,아니오만 올수있음
ex ) col CHAR(1) CHECK (col IN ('A', 'B', 'C')) // col에는 'A', 'B' 또는 'C'만 저장할 수 있습니다.
     ADD CONSTRAINT CHECK (col NOT IN ('X')); // col에는 'X'를 저장할 수 없습니다.
~~~

SQL
- EXISTS
서브쿼리가 실행이되면 참 아니면 거짓(데이터가 있는지 없는지만 조회)
참일경우 EXISTS서브쿼리는 실행되지 않고 메인 쿼리만 실행
--
SELECT
*
FROM emp
WHERE EXISTS(
    SELECT *
    FROM emp WHERE
    job = 'manager'
)
--
SELECT
*
FROM emp
WHERE not EXISTS(
    SELECT *
    FROM emp WHERE
    job = 'manager'
)
--
not EXISTS = 데이터가 없을때 실행

EXISTS는 UPDATE할때 사용
--은행 
update 백업실행
set 백업날짜 = '220222'
where EXISTS(
    select * from 입출금
)
입출금내역이 있으면 백업날짜 업데이트 없으면 실행x
--
--EXISTS, not EXISTS
=> 서브쿼리 데이터 여부에 따라 실행 판단 

모델링
=> (emp,dept)

부서테이블없다고 가정
테이블이름:emp
empno,ename,dname,loc
------------------------
100,홍길동,개발팀,대전
null,null,기획팀,대전
*테이블에 null데이터가 많으면 정규화(모델링)고려 대상
*update - >(delete->insert)

primary key(PK)
: 중복 허용 x
: 자동으로 인덱스가 붙음

FOREIGN KEY
: 중복 허용 o -> 중복 허용x(unique key)
: 인덱스가 없음
: index를 생성해야 함
-------------------
문법)
CREATE INDEX <인덱스명>
ON <테이블명> (컬럼명1,컬럼명2,...)
--------------------
문법
CREATE TABLE emp(
deptno int UNIQUE KEY
)
=
CREATE TABLE emp(
    deptno int,
    UNIQUE KEY emp(deptno)
)
-------------------
UNIQUE key : PK키는 아니지만 그특성을 가짐
(중복X /인덱스가 있음)